#include <iostream> // Підключення бібліотеки для введення/виведення (наприклад, cout)
#include <string>   // Підключення бібліотеки для роботи з рядками (string)

// Використання стандартного простору імен, щоб не писати std:: перед cout, string і т.д.
using namespace std;

// Оголошення класу Person (Людина)
class Person
{
// Секція public означає, що члени класу (змінні та методи) доступні ззовні класу
public:
    // Змінні-члени класу (атрибути)
    string name; // Ім'я людини (тип string)
    int age;     // Вік людини (тип int)

private: // Додамо приватну змінну для відстеження змін
    bool data_changed; // Прапорець, що показує, чи змінювалися дані через сеттер

// Публічні методи класу (функції, що працюють з даними класу)
public:
    // Конструктор класу - викликається при створенні нового об'єкта Person
    // Ініціалізує ім'я та вік, встановлює прапорець змін у false
    Person(string n = "Невідомо", int a = 0) {
        name = n;           // Встановлюємо ім'я
        age = a;            // Встановлюємо вік
        data_changed = false; // Початково дані не змінювалися через сеттер
        cout << "Створено об'єкт Person: " << name << ", " << age << " років" << endl;
    }

    // Метод для встановлення нового імені (сеттер для імені)
    void set_name(string new_name) {
        name = new_name;      // Присвоюємо нове ім'я
        data_changed = true; // Встановлюємо прапорець, що дані змінилися
    }

    // Метод для встановлення нового віку (сеттер для віку)
    // **Завдання 2: Додайте метод set** (реалізовано тут і вище)
    void set_age(int new_age) {
        if (new_age > 0 && new_age < 150) { // Додамо просту перевірку віку
            age = new_age;        // Присвоюємо новий вік
            data_changed = true; // Встановлюємо прапорець, що дані змінилися
        } else {
            cout << "Некоректний вік: " << new_age << endl; // Повідомлення про помилку
        }
    }

    // Метод для отримання віку (геттер для віку)
    // **Завдання 3: Доробіть метод get_aria**
    // Примітка: "aria" (площа) не має сенсу для класу Person.
    // Ймовірно, мався на увазі метод для отримання якогось атрибуту, наприклад, віку.
    // Тому реалізуємо метод get_age().
    int get_age() {
        return age; // Повертає поточний вік людини
    }

     // Метод для отримання імені (геттер для імені)
    string get_name() {
        return name; // Повертає поточне ім'я людини
    }


    // Метод для перевірки, чи змінювалися дані об'єкта через сеттери
    // **Завдання 3: Доробіть метод changet (перевіряє чи змінювалась сторона)**
    // Примітка: "сторона" також не стосується класу Person.
    // Ймовірно, малася на увазі перевірка зміни будь-якого атрибуту (імені чи віку).
    // Реалізуємо метод was_changed(), який перевіряє прапорець data_changed.
    bool was_changed() {
        return data_changed; // Повертає true, якщо дані змінювалися через set_name або set_age, інакше false
    }

    // Метод для виведення інформації про людину
    void print_info() {
        // Виводимо ім'я та вік людини
        cout << name << " має " << age << " років" << endl;
    }
}; // Кінець оголошення класу Person

// Головна функція програми - точка входу
int main()
{
    // Встановлення української локалі для коректного виведення в консоль
    setlocale(LC_ALL, "uk_UA.UTF-8"); // Може знадобитися налаштувати консоль

    cout << "--- Виправлення помилок та створення об'єктів ---" << endl;

    // **Завдання 1: Виправіть помилки і створіть кілька нових об'єктів.**

    // Створення першого об'єкта 'person1' класу Person за допомогою конструктора
    Person person1("Гаррі", 23); // Помилку person.age $=23$; виправлено, використовуємо конструктор

    // Доступ до членів об'єкта та їх виведення (використовуємо метод print_info)
    cout << "Знайомтеся, це ";
    person1.print_info(); // Помилку cout << "Meet" << person.name(); виправлено, використовуємо метод

    // Створення другого об'єкта 'person2' з іншими даними
    Person person2("Герміона", 22);
    person2.print_info();

    // Створення третього об'єкта 'person3' без параметрів (використовується конструктор за замовчуванням)
    Person person3;
    person3.print_info();


    cout << "\n--- Використання методів set, get та перевірки змін ---" << endl;

    // Використання сеттера для зміни віку person1
    cout << "Чи змінювалися дані person1 до виклику set_age? " << (person1.was_changed() ? "Так" : "Ні") << endl;
    person1.set_age(24);
    cout << "Новий вік " << person1.get_name() << ": " << person1.get_age() << " (отримано через get_age())" << endl; // Використання геттера get_age()
    cout << "Чи змінювалися дані person1 після виклику set_age? " << (person1.was_changed() ? "Так" : "Ні") << endl; // Використання was_changed()

    // Спроба встановити некоректний вік для person2
    person2.set_age(-5);
    person2.print_info(); // Вік не змінився
    cout << "Чи змінювалися дані person2 після невдалого виклику set_age? " << (person2.was_changed() ? "Так" : "Ні") << endl; // Залишиться false, бо вік не змінився

    // Зміна імені person3
    person3.set_name("Рон");
    person3.set_age(23);
    cout << "Оновлені дані person3: ";
    person3.print_info();
    cout << "Чи змінювалися дані person3 після викликів set? " << (person3.was_changed() ? "Так" : "Ні") << endl;


    // Повертаємо 0, що свідчить про успішне завершення програми
    return 0;
} // Кінець функції main
